apply plugin: "java"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "nexus"

task wrapper(type: Wrapper) {
    gradleVersion   = "1.10"
    jarFile         = "gradle/gradle-wrapper.jar"
}

repositories {
    mavenCentral()
}

compileJava {
    options.compilerArgs.add("-Xlint:unchecked")
    options.compilerArgs.add("-Xlint:deprecation")
}

project.archivesBaseName    = project.name
project.version             = "1.1.0"

ext.projectLongName         = "PhantomJS Driver (GhostDriver)"
ext.projectArtefactDir      = "jars/"
ext.projectMainClass        = "org.openqa.selenium.phantomjs.PhantomJSDriver"
ext.projectCreator          = "Ivan De Marino (https://github.com/detro)"
ext.seleniumVersion         = "2.39.0"

dependencies {
    ["selenium-java", "selenium-remote-driver", "selenium-server"].each {
        compile "org.seleniumhq.selenium:$it:$seleniumVersion"
    }
}

tasks.withType(JavaExec) {
    classpath = configurations.compile + sourceSets.test.output
    args project.hasProperty("args") ? project.args.split("\\s") : []
}

jar {
    destinationDir      = file(projectArtefactDir)
    manifest {
        attributes(
            "Implementation-Title"      : projectLongName,
            "Implementation-Version"    : project.version,
            "Gradle-Version"            : project.gradle.gradleVersion,
            "Main-Class"                : projectMainClass,
            "Created-By"                : projectCreator
        )
    }
}

task sourceJarBuild(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource

    destinationDir      = file(projectArtefactDir)
    manifest {
        attributes(
            "Implementation-Title"      : projectLongName,
            "Implementation-Version"    : project.version,
            "Gradle-Version"            : project.gradle.gradleVersion,
            "Main-Class"                : projectMainClass,
            "Created-By"                : projectCreator
        )
    }
}

task javadocJarBuild(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir

    destinationDir      = file(projectArtefactDir)
    manifest {
        attributes(
            "Implementation-Title"      : projectLongName,
            "Implementation-Version"    : project.version,
            "Gradle-Version"            : project.gradle.gradleVersion,
            "Main-Class"                : projectMainClass,
            "Created-By"                : projectCreator
        )
    }
}

//task jars {
//    dependsOn jar, sourceJarBuild, javadocJarBuild
//}

//signing {
//    sign jar
//    sign sourceJarBuild
//    sign javadocJarBuild
//}

task signJars {
    dependsOn jars
    dependsOn signJar, signJavadocJarBuild, signSourceJarBuild
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.gradle.api.plugins:gradle-nexus-plugin:0.2"
    }
}

nexus {
    sign = true
}

modifyPom {
    project {
        name            "PhantomJSDriver"
        description     """
                        PhantomJSDriver is a Java binding for the PhantomJS WebDriver, GhostDriver.
                        The binding is developed within the GhostDriver project, and distributed through public Maven repository
                        and Selenium official .zip package.
                        """
        url             "https://github.com/detro/ghostdriver"
        inceptionYear   "2013"
        groupId         "com.github.detro.ghostdriver"

        scm {
            url                     "git@github.com:detro/ghostdriver.git"
            connection              "scm:git:git@github.com:detro/ghostdriver.git"
            developerConnection     "scm:git:git@github.com:detro/ghostdriver.git"
        }

        licenses {
            license {
                name            "The BSD 2-Clause License"
                url             "http://opensource.org/licenses/BSD-2-Clause"
                distribution    "repo"
            }
        }

        developers {
            developer {
                id          "detro"
                name        "Ivan De Marino"
                email       "detronizator@gmail.com"
                url         "http://ivandemarino.me"
                roles {
                    role    "Developer"
                }
                timezone    "GMT"
            }
        }
    }
}
